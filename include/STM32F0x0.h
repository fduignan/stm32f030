/*
 * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     STM32F0x0.h
 * @brief    CMSIS HeaderFile
 * @version  1.2
 * @date     17. February 2019
 * @note     Generated by SVDConv V3.2.66 on Sunday, 17.02.2019 11:49:24
 *           from File 'STM32F0x0.svd',
 *           last modified on Wednesday, 27.09.2017 10:22:38
 */



/** @addtogroup 
  * @{
  */


/** @addtogroup STM32F0x0
  * @{
  */


#ifndef STM32F0X0_H
#define STM32F0X0_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  STM32F0x0 Specific Interrupt Numbers  ========================================== */
  WWDG_IRQn                 =   0,              /*!< 0  Window Watchdog interrupt                                              */
  PVD_IRQn                  =   1,              /*!< 1  PVD and VDDIO2 supply comparator interrupt                             */
  RTC_IRQn                  =   2,              /*!< 2  RTC interrupts                                                         */
  FLASH_IRQn                =   3,              /*!< 3  Flash global interrupt                                                 */
  RCC_IRQn                  =   4,              /*!< 4  RCC global interruptr                                                  */
  EXTI0_1_IRQn              =   5,              /*!< 5  EXTI Line[1:0] interrupts                                              */
  EXTI2_3_IRQn              =   6,              /*!< 6  EXTI Line[3:2] interrupts                                              */
  EXTI4_15_IRQn             =   7,              /*!< 7  EXTI Line15 and EXTI4 interrupts                                       */
  DMA1_CH1_IRQn             =   9,              /*!< 9  DMA1 channel 1 interrupt                                               */
  DMA1_CH2_3_IRQn           =  10,              /*!< 10 DMA1 channel 2 and 3 interrupt                                         */
  DMA1_CH4_5_IRQn           =  11,              /*!< 11 DMA1 channel 4 and 5 interrupt                                         */
  ADC_IRQn                  =  12,              /*!< 12 ADC interrupt                                                          */
  TIM1_BRK_UP_TRG_COM_IRQn  =  13,              /*!< 13 TIM1 break, update, trigger and commutation interrupt                  */
  TIM1_CC_IRQn              =  14,              /*!< 14 TIM1 Capture Compare interrupt                                         */
  TIM3_IRQn                 =  16,              /*!< 16 TIM3 global interrupt                                                  */
  TIM6_IRQn                 =  17,              /*!< 17 TIM6 global interrupt                                                  */
  TIM14_IRQn                =  19,              /*!< 19 TIM14 global interrupt                                                 */
  TIM15_IRQn                =  20,              /*!< 20 TIM15 global interrupt                                                 */
  TIM16_IRQn                =  21,              /*!< 21 TIM16 global interrupt                                                 */
  TIM17_IRQn                =  22,              /*!< 22 TIM17 global interrupt                                                 */
  I2C1_IRQn                 =  23,              /*!< 23 I2C1 global interrupt                                                  */
  I2C2_IRQn                 =  24,              /*!< 24 I2C2 global interrupt                                                  */
  SPI1_IRQn                 =  25,              /*!< 25 SPI1_global_interrupt                                                  */
  SPI2_IRQn                 =  26,              /*!< 26 SPI2 global interrupt                                                  */
  USART1_IRQn               =  27,              /*!< 27 USART1 global interrupt                                                */
  USART2_IRQn               =  28,              /*!< 28 USART2 global interrupt                                                */
  USART3_4_5_6_IRQn         =  29,              /*!< 29 USART3, USART4, USART5, USART6 global interrupt                        */
  USB_IRQn                  =  31               /*!< 31 USB global interrupt                                                   */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M0 Processor and Core Peripherals  =========================== */
#define __CM0_REV                 0x0000U       /*!< CM0 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0.h"                           /*!< ARM Cortex-M0 processor and core peripherals                              */
#include "system_STM32F0x0.h"                   /*!< STM32F0x0 System                                                          */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief cyclic redundancy check calculation  unit (CRC)
  */

typedef struct {                                /*!< (@ 0x40023000) CRC Structure                                              */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000000) Data register                                              */
  __IOM uint32_t  IDR;                          /*!< (@ 0x00000004) Independent data register                                  */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000008) Control register                                           */
  __IOM uint32_t  INIT;                         /*!< (@ 0x0000000C) Initial CRC value                                          */
} CRC_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOF                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOF)
  */

typedef struct {                                /*!< (@ 0x48001400) GPIOF Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
  __OM  uint32_t  BRR;                          /*!< (@ 0x00000028) Port bit reset register                                    */
} GPIOF_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOA)
  */

typedef struct {                                /*!< (@ 0x48000000) GPIOA Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
  __OM  uint32_t  BRR;                          /*!< (@ 0x00000028) Port bit reset register                                    */
} GPIOA_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI1)
  */

typedef struct {                                /*!< (@ 0x40013000) SPI1 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000008) status register                                            */
  __IOM uint32_t  DR;                           /*!< (@ 0x0000000C) data register                                              */
  __IOM uint32_t  CRCPR;                        /*!< (@ 0x00000010) CRC polynomial register                                    */
  __IM  uint32_t  RXCRCR;                       /*!< (@ 0x00000014) RX CRC register                                            */
  __IM  uint32_t  TXCRCR;                       /*!< (@ 0x00000018) TX CRC register                                            */
  __IOM uint32_t  I2SCFGR;                      /*!< (@ 0x0000001C) I2S configuration register                                 */
  __IOM uint32_t  I2SPR;                        /*!< (@ 0x00000020) I2S prescaler register                                     */
} SPI1_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                            PWR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power control (PWR)
  */

typedef struct {                                /*!< (@ 0x40007000) PWR Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) power control register                                     */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000004) power control/status register                              */
} PWR_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter-integrated circuit (I2C1)
  */

typedef struct {                                /*!< (@ 0x40005400) I2C1 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) Control register 2                                         */
  __IOM uint32_t  OAR1;                         /*!< (@ 0x00000008) Own address register 1                                     */
  __IOM uint32_t  OAR2;                         /*!< (@ 0x0000000C) Own address register 2                                     */
  __IOM uint32_t  TIMINGR;                      /*!< (@ 0x00000010) Timing register                                            */
  __IOM uint32_t  TIMEOUTR;                     /*!< (@ 0x00000014) Status register 1                                          */
  __IOM uint32_t  ISR;                          /*!< (@ 0x00000018) Interrupt and Status register                              */
  __OM  uint32_t  ICR;                          /*!< (@ 0x0000001C) Interrupt clear register                                   */
  __IM  uint32_t  PECR;                         /*!< (@ 0x00000020) PEC register                                               */
  __IM  uint32_t  RXDR;                         /*!< (@ 0x00000024) Receive data register                                      */
  __IOM uint32_t  TXDR;                         /*!< (@ 0x00000028) Transmit data register                                     */
} I2C1_Type;                                    /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           IWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Independent watchdog (IWDG)
  */

typedef struct {                                /*!< (@ 0x40003000) IWDG Structure                                             */
  __OM  uint32_t  KR;                           /*!< (@ 0x00000000) Key register                                               */
  __IOM uint32_t  PR;                           /*!< (@ 0x00000004) Prescaler register                                         */
  __IOM uint32_t  RLR;                          /*!< (@ 0x00000008) Reload register                                            */
  __IM  uint32_t  SR;                           /*!< (@ 0x0000000C) Status register                                            */
  __IOM uint32_t  WINR;                         /*!< (@ 0x00000010) Window register                                            */
} IWDG_Type;                                    /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           WWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Window watchdog (WWDG)
  */

typedef struct {                                /*!< (@ 0x40002C00) WWDG Structure                                             */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) Control register                                           */
  __IOM uint32_t  CFR;                          /*!< (@ 0x00000004) Configuration register                                     */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000008) Status register                                            */
} WWDG_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           TIM1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Advanced-timers (TIM1)
  */

typedef struct {                                /*!< (@ 0x40012C00) TIM1 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  
  union {
    __IOM uint32_t CCMR2_Output;                /*!< (@ 0x0000001C) capture/compare mode register (output mode)                */
    __IOM uint32_t CCMR2_Input;                 /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
  };
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IOM uint32_t  RCR;                          /*!< (@ 0x00000030) repetition counter register                                */
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IOM uint32_t  CCR3;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
  __IOM uint32_t  BDTR;                         /*!< (@ 0x00000044) break and dead-time register                               */
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
} TIM1_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM3                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM3)
  */

typedef struct {                                /*!< (@ 0x40000400) TIM3 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  
  union {
    __IOM uint32_t CCMR2_Output;                /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
    __IOM uint32_t CCMR2_Input;                 /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
  };
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IOM uint32_t  CCR3;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
} TIM3_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM14                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM14)
  */

typedef struct {                                /*!< (@ 0x40002000) TIM14 Structure                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register (input mode)                 */
  };
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IM  uint32_t  RESERVED3[6];
  __IOM uint32_t  OR;                           /*!< (@ 0x00000050) option register                                            */
} TIM14_Type;                                   /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM6                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Basic-timers (TIM6)
  */

typedef struct {                                /*!< (@ 0x40001000) TIM6 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
} TIM6_Type;                                    /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                           EXTI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief External interrupt/event  controller (EXTI)
  */

typedef struct {                                /*!< (@ 0x40010400) EXTI Structure                                             */
  __IOM uint32_t  IMR;                          /*!< (@ 0x00000000) Interrupt mask register (EXTI_IMR)                         */
  __IOM uint32_t  EMR;                          /*!< (@ 0x00000004) Event mask register (EXTI_EMR)                             */
  __IOM uint32_t  RTSR;                         /*!< (@ 0x00000008) Rising Trigger selection register (EXTI_RTSR)              */
  __IOM uint32_t  FTSR;                         /*!< (@ 0x0000000C) Falling Trigger selection register (EXTI_FTSR)             */
  __IOM uint32_t  SWIER;                        /*!< (@ 0x00000010) Software interrupt event register (EXTI_SWIER)             */
  __IOM uint32_t  PR;                           /*!< (@ 0x00000014) Pending register (EXTI_PR)                                 */
} EXTI_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           NVIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Nested Vectored Interrupt  Controller (NVIC)
  */

typedef struct {                                /*!< (@ 0xE000E100) NVIC Structure                                             */
  __IOM uint32_t  ISER;                         /*!< (@ 0x00000000) Interrupt Set Enable Register                              */
  __IM  uint32_t  RESERVED[31];
  __IOM uint32_t  ICER;                         /*!< (@ 0x00000080) Interrupt Clear Enable Register                            */
  __IM  uint32_t  RESERVED1[31];
  __IOM uint32_t  ISPR;                         /*!< (@ 0x00000100) Interrupt Set-Pending Register                             */
  __IM  uint32_t  RESERVED2[31];
  __IOM uint32_t  ICPR;                         /*!< (@ 0x00000180) Interrupt Clear-Pending Register                           */
  __IM  uint32_t  RESERVED3[95];
  __IOM uint32_t  IPR0;                         /*!< (@ 0x00000300) Interrupt Priority Register 0                              */
  __IOM uint32_t  IPR1;                         /*!< (@ 0x00000304) Interrupt Priority Register 1                              */
  __IOM uint32_t  IPR2;                         /*!< (@ 0x00000308) Interrupt Priority Register 2                              */
  __IOM uint32_t  IPR3;                         /*!< (@ 0x0000030C) Interrupt Priority Register 3                              */
  __IOM uint32_t  IPR4;                         /*!< (@ 0x00000310) Interrupt Priority Register 4                              */
  __IOM uint32_t  IPR5;                         /*!< (@ 0x00000314) Interrupt Priority Register 5                              */
  __IOM uint32_t  IPR6;                         /*!< (@ 0x00000318) Interrupt Priority Register 6                              */
  __IOM uint32_t  IPR7;                         /*!< (@ 0x0000031C) Interrupt Priority Register 7                              */
} NVIC_Type;                                    /*!< Size = 800 (0x320)                                                        */



/* =========================================================================================================================== */
/* ================                                           DMA1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA controller (DMA1)
  */

typedef struct {                                /*!< (@ 0x40020000) DMA1 Structure                                             */
  __IM  uint32_t  ISR;                          /*!< (@ 0x00000000) DMA interrupt status register (DMA_ISR)                    */
  __OM  uint32_t  IFCR;                         /*!< (@ 0x00000004) DMA interrupt flag clear register (DMA_IFCR)               */
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000008) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR1;                       /*!< (@ 0x0000000C) DMA channel 1 number of data register                      */
  __IOM uint32_t  CPAR1;                        /*!< (@ 0x00000010) DMA channel 1 peripheral address register                  */
  __IOM uint32_t  CMAR1;                        /*!< (@ 0x00000014) DMA channel 1 memory address register                      */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCR2;                         /*!< (@ 0x0000001C) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR2;                       /*!< (@ 0x00000020) DMA channel 2 number of data register                      */
  __IOM uint32_t  CPAR2;                        /*!< (@ 0x00000024) DMA channel 2 peripheral address register                  */
  __IOM uint32_t  CMAR2;                        /*!< (@ 0x00000028) DMA channel 2 memory address register                      */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCR3;                         /*!< (@ 0x00000030) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR3;                       /*!< (@ 0x00000034) DMA channel 3 number of data register                      */
  __IOM uint32_t  CPAR3;                        /*!< (@ 0x00000038) DMA channel 3 peripheral address register                  */
  __IOM uint32_t  CMAR3;                        /*!< (@ 0x0000003C) DMA channel 3 memory address register                      */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000044) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR4;                       /*!< (@ 0x00000048) DMA channel 4 number of data register                      */
  __IOM uint32_t  CPAR4;                        /*!< (@ 0x0000004C) DMA channel 4 peripheral address register                  */
  __IOM uint32_t  CMAR4;                        /*!< (@ 0x00000050) DMA channel 4 memory address register                      */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  CCR5;                         /*!< (@ 0x00000058) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR5;                       /*!< (@ 0x0000005C) DMA channel 5 number of data register                      */
  __IOM uint32_t  CPAR5;                        /*!< (@ 0x00000060) DMA channel 5 peripheral address register                  */
  __IOM uint32_t  CMAR5;                        /*!< (@ 0x00000064) DMA channel 5 memory address register                      */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  CCR6;                         /*!< (@ 0x0000006C) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR6;                       /*!< (@ 0x00000070) DMA channel 6 number of data register                      */
  __IOM uint32_t  CPAR6;                        /*!< (@ 0x00000074) DMA channel 6 peripheral address register                  */
  __IOM uint32_t  CMAR6;                        /*!< (@ 0x00000078) DMA channel 6 memory address register                      */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  CCR7;                         /*!< (@ 0x00000080) DMA channel configuration register (DMA_CCR)               */
  __IOM uint32_t  CNDTR7;                       /*!< (@ 0x00000084) DMA channel 7 number of data register                      */
  __IOM uint32_t  CPAR7;                        /*!< (@ 0x00000088) DMA channel 7 peripheral address register                  */
  __IOM uint32_t  CMAR7;                        /*!< (@ 0x0000008C) DMA channel 7 memory address register                      */
} DMA1_Type;                                    /*!< Size = 144 (0x90)                                                         */



/* =========================================================================================================================== */
/* ================                                            RCC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset and clock control (RCC)
  */

typedef struct {                                /*!< (@ 0x40021000) RCC Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) Clock control register                                     */
  __IOM uint32_t  CFGR;                         /*!< (@ 0x00000004) Clock configuration register (RCC_CFGR)                    */
  __IOM uint32_t  CIR;                          /*!< (@ 0x00000008) Clock interrupt register (RCC_CIR)                         */
  __IOM uint32_t  APB2RSTR;                     /*!< (@ 0x0000000C) APB2 peripheral reset register (RCC_APB2RSTR)              */
  __IOM uint32_t  APB1RSTR;                     /*!< (@ 0x00000010) APB1 peripheral reset register (RCC_APB1RSTR)              */
  __IOM uint32_t  AHBENR;                       /*!< (@ 0x00000014) AHB Peripheral Clock enable register (RCC_AHBENR)          */
  __IOM uint32_t  APB2ENR;                      /*!< (@ 0x00000018) APB2 peripheral clock enable register (RCC_APB2ENR)        */
  __IOM uint32_t  APB1ENR;                      /*!< (@ 0x0000001C) APB1 peripheral clock enable register (RCC_APB1ENR)        */
  __IOM uint32_t  BDCR;                         /*!< (@ 0x00000020) Backup domain control register (RCC_BDCR)                  */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000024) Control/status register (RCC_CSR)                          */
  __IOM uint32_t  AHBRSTR;                      /*!< (@ 0x00000028) AHB peripheral reset register                              */
  __IOM uint32_t  CFGR2;                        /*!< (@ 0x0000002C) Clock configuration register 2                             */
  __IOM uint32_t  CFGR3;                        /*!< (@ 0x00000030) Clock configuration register 3                             */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000034) Clock control register 2                                   */
} RCC_Type;                                     /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                          SYSCFG                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System configuration controller (SYSCFG)
  */

typedef struct {                                /*!< (@ 0x40010000) SYSCFG Structure                                           */
  __IOM uint32_t  CFGR1;                        /*!< (@ 0x00000000) configuration register 1                                   */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  EXTICR1;                      /*!< (@ 0x00000008) external interrupt configuration register 1                */
  __IOM uint32_t  EXTICR2;                      /*!< (@ 0x0000000C) external interrupt configuration register 2                */
  __IOM uint32_t  EXTICR3;                      /*!< (@ 0x00000010) external interrupt configuration register 3                */
  __IOM uint32_t  EXTICR4;                      /*!< (@ 0x00000014) external interrupt configuration register 4                */
  __IOM uint32_t  CFGR2;                        /*!< (@ 0x00000018) configuration register 2                                   */
} SYSCFG_Type;                                  /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog-to-digital converter (ADC)
  */

typedef struct {                                /*!< (@ 0x40012400) ADC Structure                                              */
  __IOM uint32_t  ISR;                          /*!< (@ 0x00000000) interrupt and status register                              */
  __IOM uint32_t  IER;                          /*!< (@ 0x00000004) interrupt enable register                                  */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000008) control register                                           */
  __IOM uint32_t  CFGR1;                        /*!< (@ 0x0000000C) configuration register 1                                   */
  __IOM uint32_t  CFGR2;                        /*!< (@ 0x00000010) configuration register 2                                   */
  __IOM uint32_t  SMPR;                         /*!< (@ 0x00000014) sampling time register                                     */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  TR;                           /*!< (@ 0x00000020) watchdog threshold register                                */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CHSELR;                       /*!< (@ 0x00000028) channel selection register                                 */
  __IM  uint32_t  RESERVED2[5];
  __IM  uint32_t  DR;                           /*!< (@ 0x00000040) data register                                              */
  __IM  uint32_t  RESERVED3[177];
  __IOM uint32_t  CCR;                          /*!< (@ 0x00000308) common configuration register                              */
} ADC_Type;                                     /*!< Size = 780 (0x30c)                                                        */



/* =========================================================================================================================== */
/* ================                                          USART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver  transmitter (USART1)
  */

typedef struct {                                /*!< (@ 0x40013800) USART1 Structure                                           */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) Control register 2                                         */
  __IOM uint32_t  CR3;                          /*!< (@ 0x00000008) Control register 3                                         */
  __IOM uint32_t  BRR;                          /*!< (@ 0x0000000C) Baud rate register                                         */
  __IOM uint32_t  GTPR;                         /*!< (@ 0x00000010) Guard time and prescaler register                          */
  __IOM uint32_t  RTOR;                         /*!< (@ 0x00000014) Receiver timeout register                                  */
  __IOM uint32_t  RQR;                          /*!< (@ 0x00000018) Request register                                           */
  __IM  uint32_t  ISR;                          /*!< (@ 0x0000001C) Interrupt & status register                                */
  __IOM uint32_t  ICR;                          /*!< (@ 0x00000020) Interrupt flag clear register                              */
  __IM  uint32_t  RDR;                          /*!< (@ 0x00000024) Receive data register                                      */
  __IOM uint32_t  TDR;                          /*!< (@ 0x00000028) Transmit data register                                     */
} USART1_Type;                                  /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real-time clock (RTC)
  */

typedef struct {                                /*!< (@ 0x40002800) RTC Structure                                              */
  __IOM uint32_t  TR;                           /*!< (@ 0x00000000) time register                                              */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000004) date register                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000008) control register                                           */
  __IOM uint32_t  ISR;                          /*!< (@ 0x0000000C) initialization and status register                         */
  __IOM uint32_t  PRER;                         /*!< (@ 0x00000010) prescaler register                                         */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  ALRMAR;                       /*!< (@ 0x0000001C) alarm A register                                           */
  __IM  uint32_t  RESERVED1;
  __OM  uint32_t  WPR;                          /*!< (@ 0x00000024) write protection register                                  */
  __IM  uint32_t  SSR;                          /*!< (@ 0x00000028) sub second register                                        */
  __OM  uint32_t  SHIFTR;                       /*!< (@ 0x0000002C) shift control register                                     */
  __IM  uint32_t  TSTR;                         /*!< (@ 0x00000030) timestamp time register                                    */
  __IM  uint32_t  TSDR;                         /*!< (@ 0x00000034) timestamp date register                                    */
  __IM  uint32_t  TSSSR;                        /*!< (@ 0x00000038) time-stamp sub second register                             */
  __IOM uint32_t  CALR;                         /*!< (@ 0x0000003C) calibration register                                       */
  __IOM uint32_t  TAFCR;                        /*!< (@ 0x00000040) tamper and alternate function configuration register       */
  __IOM uint32_t  ALRMASSR;                     /*!< (@ 0x00000044) alarm A sub second register                                */
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  BKP0R;                        /*!< (@ 0x00000050) backup register                                            */
  __IOM uint32_t  BKP1R;                        /*!< (@ 0x00000054) backup register                                            */
  __IOM uint32_t  BKP2R;                        /*!< (@ 0x00000058) backup register                                            */
  __IOM uint32_t  BKP3R;                        /*!< (@ 0x0000005C) backup register                                            */
  __IOM uint32_t  BKP4R;                        /*!< (@ 0x00000060) backup register                                            */
} RTC_Type;                                     /*!< Size = 100 (0x64)                                                         */



/* =========================================================================================================================== */
/* ================                                           TIM15                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM15)
  */

typedef struct {                                /*!< (@ 0x40014000) TIM15 Structure                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IOM uint32_t  RCR;                          /*!< (@ 0x00000030) repetition counter register                                */
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  BDTR;                         /*!< (@ 0x00000044) break and dead-time register                               */
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
} TIM15_Type;                                   /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM16                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM16)
  */

typedef struct {                                /*!< (@ 0x40014400) TIM16 Structure                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IOM uint32_t  RCR;                          /*!< (@ 0x00000030) repetition counter register                                */
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  BDTR;                         /*!< (@ 0x00000044) break and dead-time register                               */
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
} TIM16_Type;                                   /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           Flash                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Flash (Flash)
  */

typedef struct {                                /*!< (@ 0x40022000) Flash Structure                                            */
  __IOM uint32_t  ACR;                          /*!< (@ 0x00000000) Flash access control register                              */
  __OM  uint32_t  KEYR;                         /*!< (@ 0x00000004) Flash key register                                         */
  __OM  uint32_t  OPTKEYR;                      /*!< (@ 0x00000008) Flash option key register                                  */
  __IOM uint32_t  SR;                           /*!< (@ 0x0000000C) Flash status register                                      */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000010) Flash control register                                     */
  __OM  uint32_t  AR;                           /*!< (@ 0x00000014) Flash address register                                     */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  OBR;                          /*!< (@ 0x0000001C) Option byte register                                       */
  __IM  uint32_t  WRPR;                         /*!< (@ 0x00000020) Write protection register                                  */
} Flash_Type;                                   /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                          DBGMCU                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Debug support (DBGMCU)
  */

typedef struct {                                /*!< (@ 0x40015800) DBGMCU Structure                                           */
  __IM  uint32_t  IDCODE;                       /*!< (@ 0x00000000) MCU Device ID Code Register                                */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000004) Debug MCU Configuration Register                           */
  __IOM uint32_t  APB1_FZ;                      /*!< (@ 0x00000008) Debug MCU APB1 freeze register                             */
  __IOM uint32_t  APB2_FZ;                      /*!< (@ 0x0000000C) Debug MCU APB2 freeze register                             */
} DBGMCU_Type;                                  /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal serial bus full-speed device  interface (USB)
  */

typedef struct {                                /*!< (@ 0x40005C00) USB Structure                                              */
  __IOM uint32_t  EP0R;                         /*!< (@ 0x00000000) endpoint 0 register                                        */
  __IOM uint32_t  EP1R;                         /*!< (@ 0x00000004) endpoint 1 register                                        */
  __IOM uint32_t  EP2R;                         /*!< (@ 0x00000008) endpoint 2 register                                        */
  __IOM uint32_t  EP3R;                         /*!< (@ 0x0000000C) endpoint 3 register                                        */
  __IOM uint32_t  EP4R;                         /*!< (@ 0x00000010) endpoint 4 register                                        */
  __IOM uint32_t  EP5R;                         /*!< (@ 0x00000014) endpoint 5 register                                        */
  __IOM uint32_t  EP6R;                         /*!< (@ 0x00000018) endpoint 6 register                                        */
  __IOM uint32_t  EP7R;                         /*!< (@ 0x0000001C) endpoint 7 register                                        */
  __IM  uint32_t  RESERVED[8];
  __IOM uint32_t  CNTR;                         /*!< (@ 0x00000040) control register                                           */
  __IOM uint32_t  ISTR;                         /*!< (@ 0x00000044) interrupt status register                                  */
  __IM  uint32_t  FNR;                          /*!< (@ 0x00000048) frame number register                                      */
  __IOM uint32_t  DADDR;                        /*!< (@ 0x0000004C) device address                                             */
  __IOM uint32_t  BTABLE;                       /*!< (@ 0x00000050) Buffer table address                                       */
  __IOM uint32_t  LPMCSR;                       /*!< (@ 0x00000054) LPM control and status register                            */
  __IOM uint32_t  BCDR;                         /*!< (@ 0x00000058) Battery charging detector                                  */
} USB_Type;                                     /*!< Size = 92 (0x5c)                                                          */



/* =========================================================================================================================== */
/* ================                                            SCB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief System control block (SCB)
  */

typedef struct {                                /*!< (@ 0xE000ED00) SCB Structure                                              */
  __IM  uint32_t  CPUID;                        /*!< (@ 0x00000000) CPUID base register                                        */
  __IOM uint32_t  ICSR;                         /*!< (@ 0x00000004) Interrupt control and state register                       */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  AIRCR;                        /*!< (@ 0x0000000C) Application interrupt and reset control register           */
  __IOM uint32_t  SCR;                          /*!< (@ 0x00000010) System control register                                    */
  __IOM uint32_t  CCR;                          /*!< (@ 0x00000014) Configuration and control register                         */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  SHPR2;                        /*!< (@ 0x0000001C) System handler priority registers                          */
  __IOM uint32_t  SHPR3;                        /*!< (@ 0x00000020) System handler priority registers                          */
} SCB_Type;                                     /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                            STK                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SysTick timer (STK)
  */

typedef struct {                                /*!< (@ 0xE000E010) STK Structure                                              */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000000) SysTick control and status register                        */
  __IOM uint32_t  RVR;                          /*!< (@ 0x00000004) SysTick reload value register                              */
  __IOM uint32_t  CVR;                          /*!< (@ 0x00000008) SysTick current value register                             */
  __IOM uint32_t  CALIB;                        /*!< (@ 0x0000000C) SysTick calibration value register                         */
} STK_Type;                                     /*!< Size = 16 (0x10)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define CRC_BASE                    0x40023000UL
#define GPIOF_BASE                  0x48001400UL
#define GPIOD_BASE                  0x48000C00UL
#define GPIOC_BASE                  0x48000800UL
#define GPIOB_BASE                  0x48000400UL
#define GPIOA_BASE                  0x48000000UL
#define SPI1_BASE                   0x40013000UL
#define SPI2_BASE                   0x40003800UL
#define PWR_BASE                    0x40007000UL
#define I2C1_BASE                   0x40005400UL
#define I2C2_BASE                   0x40005800UL
#define IWDG_BASE                   0x40003000UL
#define WWDG_BASE                   0x40002C00UL
#define TIM1_BASE                   0x40012C00UL
#define TIM3_BASE                   0x40000400UL
#define TIM14_BASE                  0x40002000UL
#define TIM6_BASE                   0x40001000UL
#define TIM7_BASE                   0x40001400UL
#define EXTI_BASE                   0x40010400UL
#define NVIC_BASE                   0xE000E100UL
#define DMA1_BASE                   0x40020000UL
#define RCC_BASE                    0x40021000UL
#define SYSCFG_BASE                 0x40010000UL
#define ADC_BASE                    0x40012400UL
#define USART1_BASE                 0x40013800UL
#define USART2_BASE                 0x40004400UL
#define USART3_BASE                 0x40004800UL
#define USART4_BASE                 0x40004C00UL
#define USART6_BASE                 0x40011400UL
#define USART5_BASE                 0x40005000UL
#define RTC_BASE                    0x40002800UL
#define TIM15_BASE                  0x40014000UL
#define TIM16_BASE                  0x40014400UL
#define TIM17_BASE                  0x40014800UL
#define Flash_BASE                  0x40022000UL
#define DBGMCU_BASE                 0x40015800UL
#define USB_BASE                    0x40005C00UL
#define SCB_BASE                    0xE000ED00UL
#define STK_BASE                    0xE000E010UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define CRC                         ((CRC_Type*)               CRC_BASE)
#define GPIOF                       ((GPIOF_Type*)             GPIOF_BASE)
#define GPIOD                       ((GPIOF_Type*)             GPIOD_BASE)
#define GPIOC                       ((GPIOF_Type*)             GPIOC_BASE)
#define GPIOB                       ((GPIOF_Type*)             GPIOB_BASE)
#define GPIOA                       ((GPIOA_Type*)             GPIOA_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define SPI2                        ((SPI1_Type*)              SPI2_BASE)
#define PWR                         ((PWR_Type*)               PWR_BASE)
#define I2C1                        ((I2C1_Type*)              I2C1_BASE)
#define I2C2                        ((I2C1_Type*)              I2C2_BASE)
#define IWDG                        ((IWDG_Type*)              IWDG_BASE)
#define WWDG                        ((WWDG_Type*)              WWDG_BASE)
#define TIM1                        ((TIM1_Type*)              TIM1_BASE)
#define TIM3                        ((TIM3_Type*)              TIM3_BASE)
#define TIM14                       ((TIM14_Type*)             TIM14_BASE)
#define TIM6                        ((TIM6_Type*)              TIM6_BASE)
#define TIM7                        ((TIM6_Type*)              TIM7_BASE)
#define EXTI                        ((EXTI_Type*)              EXTI_BASE)
#define NVIC                        ((NVIC_Type*)              NVIC_BASE)
#define DMA1                        ((DMA1_Type*)              DMA1_BASE)
#define RCC                         ((RCC_Type*)               RCC_BASE)
#define SYSCFG                      ((SYSCFG_Type*)            SYSCFG_BASE)
#define ADC                         ((ADC_Type*)               ADC_BASE)
#define USART1                      ((USART1_Type*)            USART1_BASE)
#define USART2                      ((USART1_Type*)            USART2_BASE)
#define USART3                      ((USART1_Type*)            USART3_BASE)
#define USART4                      ((USART1_Type*)            USART4_BASE)
#define USART6                      ((USART1_Type*)            USART6_BASE)
#define USART5                      ((USART1_Type*)            USART5_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define TIM15                       ((TIM15_Type*)             TIM15_BASE)
#define TIM16                       ((TIM16_Type*)             TIM16_BASE)
#define TIM17                       ((TIM16_Type*)             TIM17_BASE)
#define Flash                       ((Flash_Type*)             Flash_BASE)
#define DBGMCU                      ((DBGMCU_Type*)            DBGMCU_BASE)
#define USB                         ((USB_Type*)               USB_BASE)
#define SCB                         ((SCB_Type*)               SCB_BASE)
#define STK                         ((STK_Type*)               STK_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif

#endif /* STM32F0X0_H */


/** @} */ /* End of group STM32F0x0 */

/** @} */ /* End of group  */
